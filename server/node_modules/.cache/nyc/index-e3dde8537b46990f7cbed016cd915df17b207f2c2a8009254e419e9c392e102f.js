function cov_23jq3k227j(){var path="C:\\Users\\admin\\Desktop\\Andela\\Capstone\\UI\\My-BRAND-Raphaela\\server\\index.js";var hash="ef8e82c2b9a4deb96cbf8d416c9e4b6fa4a7f531";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\admin\\Desktop\\Andela\\Capstone\\UI\\My-BRAND-Raphaela\\server\\index.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:3,column:0},end:{line:3,column:26}},"3":{start:{line:4,column:13},end:{line:4,column:42}},"4":{start:{line:5,column:15},end:{line:5,column:46}},"5":{start:{line:7,column:21},end:{line:7,column:45}},"6":{start:{line:8,column:18},end:{line:8,column:47}},"7":{start:{line:9,column:12},end:{line:9,column:21}},"8":{start:{line:11,column:0},end:{line:11,column:24}},"9":{start:{line:13,column:18},end:{line:42,column:1}},"10":{start:{line:169,column:20},end:{line:169,column:41}},"11":{start:{line:170,column:0},end:{line:170,column:67}},"12":{start:{line:177,column:0},end:{line:177,column:34}},"13":{start:{line:178,column:0},end:{line:186,column:2}},"14":{start:{line:181,column:4},end:{line:185,column:5}},"15":{start:{line:182,column:8},end:{line:182,column:24}},"16":{start:{line:184,column:8},end:{line:184,column:45}},"17":{start:{line:191,column:21},end:{line:191,column:48}},"18":{start:{line:192,column:0},end:{line:192,column:33}},"19":{start:{line:195,column:19},end:{line:195,column:44}},"20":{start:{line:196,column:0},end:{line:196,column:29}},"21":{start:{line:197,column:0},end:{line:204,column:2}},"22":{start:{line:198,column:4},end:{line:203,column:5}},"23":{start:{line:199,column:8},end:{line:199,column:52}},"24":{start:{line:201,column:8},end:{line:201,column:35}},"25":{start:{line:202,column:8},end:{line:202,column:54}},"26":{start:{line:209,column:18},end:{line:209,column:42}},"27":{start:{line:210,column:20},end:{line:210,column:35}},"28":{start:{line:211,column:0},end:{line:211,column:27}},"29":{start:{line:215,column:0},end:{line:217,column:2}},"30":{start:{line:216,column:4},end:{line:216,column:31}},"31":{start:{line:219,column:0},end:{line:219,column:19}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:180,column:2},end:{line:180,column:3}},loc:{start:{line:180,column:9},end:{line:186,column:1}},line:180},"1":{name:"(anonymous_1)",decl:{start:{line:197,column:17},end:{line:197,column:18}},loc:{start:{line:197,column:28},end:{line:204,column:1}},line:197},"2":{name:"(anonymous_2)",decl:{start:{line:215,column:16},end:{line:215,column:17}},loc:{start:{line:215,column:20},end:{line:217,column:1}},line:215}},branchMap:{"0":{loc:{start:{line:181,column:4},end:{line:185,column:5}},type:"if",locations:[{start:{line:181,column:4},end:{line:185,column:5}},{start:{line:181,column:4},end:{line:185,column:5}}],line:181}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ef8e82c2b9a4deb96cbf8d416c9e4b6fa4a7f531"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_23jq3k227j=function(){return actualCoverage;};}return actualCoverage;}cov_23jq3k227j();const express=(cov_23jq3k227j().s[0]++,require("express"));const mongoose=(cov_23jq3k227j().s[1]++,require("mongoose"));cov_23jq3k227j().s[2]++;require("dotenv").config();const Blog=(cov_23jq3k227j().s[3]++,require('./models/blogModel'));const verify=(cov_23jq3k227j().s[4]++,require('./routes/verifyToken'));const swaggerJSDoc=(cov_23jq3k227j().s[5]++,require('swagger-jsdoc'));const swaggerUI=(cov_23jq3k227j().s[6]++,require('swagger-ui-express'));const app=(cov_23jq3k227j().s[7]++,express());cov_23jq3k227j().s[8]++;app.use(express.json());const options=(cov_23jq3k227j().s[9]++,{definition:{openapi:'3.0.0',info:{title:'Node JS API Project',version:'1.0.0'},components:{securitySchemas:{bearerAuth:{type:"http",scheme:"bearer",bearerFormat:"JWT"}}},security:[{bearerAuth:[]}],servers:[{url:"http://127.0.0.1:3001/"}]},apis:['./index.js','./routes/blogs.js',"./routes/queries.js",'./routes/auth.js','./models/userModel.js','./models/queryModel.js','./models/blogModel.js','./models/blogCommentModel.js','./models/blogLikeModel.jscy']});/**
 * @swagger
 *  components:
 *      schema:
 *          newUser:
 *              type: object
 *              properties:
 *                  username:
 *                      type: string
 *                  email:
 *                      type: string
 *                  password: 
 *                      type: string
 *          
 * 
 */ /**
 * @swagger
 *  components:
 *      schema:
 *          logUser:
 *              type: object
 *              properties:
 *                  username:
 *                      type: string
 *                  password:
 *                      type: string
 */ /**
 * @swagger
 *  components:
 *      schema:
 *          createBlog:
 *              type: object
 *              properties:
 *                  title: 
 *                      type: string
 *                  image:
 *                      type: string
 *                  blogContent:
 *                      type: string
 *                  blog_likes: 
 *                      type: array
 *                  blog_comments:
 *                      type: array
 * 
 */ /**
 * @swagger
 * /home :
 *  get:
 *      tags:
 *          - Home
 *      summary: This api is used to check if get method is working
 *      description: This api is working properly if it renders the words "WELCOME!"
 *      responses:
 *          200:
 *                  description: Test method is a success
 * 
 * /user/register :
 *  post:
 *      tags:
 *          - Users
 *      summary: REGISTER A USER
 *      description: This api is working properly 
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      items:
 *                          $ref: '#/components/schema/newUser'
 *      responses:
 *          200:
 *                  description: Test method is a success
 *              
 * /user/login :
 *  post:
 *      tags:
 *          - Users
 *      summary: USER LOGIN
 *      description: This api is working properly 
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      items:
 *                          $ref: '#/components/schema/logUser'
 *      responses:
 *          200:
 *                  description: Test method is a success
 * 
 * /blogs/newblog :
 *  post:
 *      tags:
 *          - Blogs
 *      summary: BLOG CREATION
 *      description: Blog will be posted by admin
 *      parameters:
 *          - in: header
 *            name: bearer-token
 *            description: add token here
 *            required: true
 *            schema:
 *              type: string
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      items:
 *                          $ref: '#/components/schema/createBlog'
 *      responses:
 *          200:
 *              description: Test method is a success          
 * 
 * 
 *
 */const swaggerSpec=(cov_23jq3k227j().s[10]++,swaggerJSDoc(options));cov_23jq3k227j().s[11]++;app.use('/api-docs',swaggerUI.serve,swaggerUI.setup(swaggerSpec));cov_23jq3k227j().s[12]++;mongoose.set("strictQuery",false);cov_23jq3k227j().s[13]++;mongoose.connect("mongodb://127.0.0.1:27017/brandDB",{useNewUrlParser:true,useUnifiedTopology:true},err=>{cov_23jq3k227j().f[0]++;cov_23jq3k227j().s[14]++;if(err){cov_23jq3k227j().b[0][0]++;cov_23jq3k227j().s[15]++;console.log(err);}else{cov_23jq3k227j().b[0][1]++;cov_23jq3k227j().s[16]++;console.log("successfully connected");}});//querries
const queriesRoute=(cov_23jq3k227j().s[17]++,require('./routes/queries'));cov_23jq3k227j().s[18]++;app.use('/queries',queriesRoute);//blogs
const blogsRoute=(cov_23jq3k227j().s[19]++,require('./routes/blogs'));cov_23jq3k227j().s[20]++;app.use('/blogs',blogsRoute);cov_23jq3k227j().s[21]++;app.get('/home',(req,res)=>{cov_23jq3k227j().f[1]++;cov_23jq3k227j().s[22]++;try{cov_23jq3k227j().s[23]++;res.status(200).json({message:'WELCOME!'});}catch(error){cov_23jq3k227j().s[24]++;console.log(error.message);cov_23jq3k227j().s[25]++;res.status(500).json({message:error.message});}});//AUTHENTICATION STARTS
const authRoute=(cov_23jq3k227j().s[26]++,require('./routes/auth'));const{version}=(cov_23jq3k227j().s[27]++,require("chai"));cov_23jq3k227j().s[28]++;app.use('/user',authRoute);//AUTHENTICATION OVER
cov_23jq3k227j().s[29]++;app.listen(3001,()=>{cov_23jq3k227j().f[2]++;cov_23jq3k227j().s[30]++;console.log('on port 3001');});cov_23jq3k227j().s[31]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,